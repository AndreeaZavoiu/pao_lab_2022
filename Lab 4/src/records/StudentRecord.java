package records;

/*
 * Starting with Java 14
 * Instead of writing a lot of boilerplate fields and methods for creating immutable classes and objects, we can use records.
 * Purpose of records: when data is immutable (assures validity of data without synchronization)
 *
 * Record = immutable data class that requires only type and name of all fields!
 * Java Compiler is the one that generates the equals, hashCode, toString methods as well as private final fields, public constructor, getters!
 *
 * "record" keyword instead of "class"
 *
 * needs JDK 14+ -> better install the latest one, 17
 * https://www.baeldung.com/java-record-keyword
 *
 */
public record StudentRecord (String name, String address) {
    /*   public constructor with 2 arguments is available generated by the compiler
         public StudentRecord (String name, String address) {
            this.name = name;
            this.address = address;
         }
    */
    public static void main(String[] args) {
        StudentRecord studentRecord = new StudentRecord("Gigel", "Gigel's address");
        StudentRecord theSameStudent = new StudentRecord("Gigel", "Gigel's address");
        StudentRecord anotherRecord = new StudentRecord("Gigel2", "Gigel2's address");

        // toString generated by compiler - name of Record + its fields key=value pairs
        System.out.println(studentRecord);
        System.out.println(anotherRecord);

        // public getters provided by the compiler - names match the name of the fields -> name() and address()
        System.out.println(studentRecord.name());
        System.out.println(anotherRecord.name());

        // equals generated by compiler
        System.out.println(studentRecord.equals(theSameStudent));

        StudentRecord student3 = new StudentRecord("Gigel");
        System.out.println(student3);

        System.out.println(StudentRecord.UNKNOWN_ADDRESS);
        System.out.println(StudentRecord.unnamed("Address"));

    }

    // possibility to add other constructor - purpose should be just for validations, keep it simple!
    public StudentRecord(String name) {this(name, "Unknown");}

    // static fields
    public static String UNKNOWN_ADDRESS = "Unknown";

    // static methods
    public static StudentRecord unnamed(String address) {
        return new StudentRecord("Unnamed", address);
    }
}
